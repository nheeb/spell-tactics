[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://v47nvbs5u1xf"]

[ext_resource type="Texture2D" uid="uid://dqtjv4vjdatsg" path="res://Assets/Materials/stylized_dirt_no_pebbles_albedo.png" id="1_yf6hk"]
[ext_resource type="Texture2D" uid="uid://b8l1rf76c0ffc" path="res://Assets/Materials/stylized_dirt_no_pebbles_normal.png" id="2_45f1e"]
[ext_resource type="Texture2D" uid="uid://btebhvf5v0hga" path="res://Assets/Materials/stylized_dirt_no_pebbles_orm.png" id="3_7jdod"]

[sub_resource type="Shader" id="Shader_yu70w"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ORMMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

#include \"res://Shaders/lib.gdshaderinc\"
instance uniform float drain_progress: hint_range(0.0, 1.0, 0.1) = 0.0;


uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);
uniform sampler2D texture_orm : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	albedo_tex.rgb = albedo.rgb * albedo_tex.rgb;
	albedo_tex = vec4(mix(albedo_tex.rgb, custom_grayscale(albedo_tex.rgb), drain_progress), 1.0);

	ALBEDO = albedo_tex.rgb;

	vec4 orm_tex = triplanar_texture(texture_orm, uv1_power_normal, uv1_triplanar_pos);
	ROUGHNESS = orm_tex.g;
 	METALLIC = orm_tex.b;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_yu70w")
shader_parameter/albedo = Color(0.765625, 0.765625, 0.765625, 1)
shader_parameter/point_size = 1.0
shader_parameter/normal_scale = 0.8
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.3, 0.3, 0.3)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_yf6hk")
shader_parameter/texture_orm = ExtResource("3_7jdod")
shader_parameter/texture_normal = ExtResource("2_45f1e")
