[gd_resource type="StandardMaterial3D" load_steps=6 format=3 uid="uid://72pgvo6r6k7c"]

[sub_resource type="Shader" id="Shader_xxhw5"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

#include \"res://VFX/Materials/lib.gdshaderinc\"

uniform vec4 albedo : source_color;
uniform vec4 glow : source_color;
uniform vec4 glow2 : source_color;
uniform vec4 glow3 : source_color;
uniform vec4 error : source_color;

uniform float glow_uv_scale = 20.0;
uniform float glow_time_scale = 5.0;
uniform float glow_power = 1.0;
uniform float glow_process: hint_range(-1.0, 1.0);
uniform float brightness: hint_range(0.0, 1.0);
uniform sampler2D glow_noise_texture;

uniform sampler2D card_texture;

uniform vec2 title_uv_aa;
uniform vec2 title_uv_bb;

uniform vec2 icon_uv_aa;
uniform vec2 icon_uv_bb;

uniform vec2 text_uv_aa;
uniform vec2 text_uv_bb;

uniform vec2 error_uv_aa;
uniform vec2 error_uv_bb;

uniform float random_seed;

uniform vec3 warp_global_pos;
varying vec3 warp_pos;

uniform float warp_progress: hint_range(0.0, 2.0);
uniform float warp_scale = 1.0;

global uniform vec3 card_warp_origin;

void vertex() {
	vec4 wrld_vertex = MODEL_MATRIX * vec4(VERTEX, 1.0);
	//warp_dist = distance(wrld_vertex.xyz, pos);
	warp_pos = wrld_vertex.xyz;
}

void fragment() {
	vec3 pos = card_warp_origin;
	float warp_dist = distance(warp_pos, pos);

	float _glow_time_scale = glow_time_scale;
	float _glow_uv_scale = glow_uv_scale;

	ALPHA = 0.0;
	ALPHA = ALPHA + texture(card_texture, uv_project(UV, title_uv_aa, title_uv_bb, vec2(0), vec2(.5, .25) )).a;
	ALPHA = ALPHA + texture(card_texture, uv_project(UV, icon_uv_aa, icon_uv_bb, vec2(0.5, 0), vec2(1) )).a;
	vec4 icon_color = texture(card_texture, uv_project(UV, icon_uv_aa, icon_uv_bb, vec2(0.5, 0), vec2(1) )).rgba;
	ALPHA = ALPHA + texture(card_texture, uv_project(UV, text_uv_aa, text_uv_bb, vec2(0, .25), vec2(.5, 1) )).a;

	float error_value = vec2_between(UV, error_uv_aa, error_uv_bb);

	float glow_noise = texture(glow_noise_texture, UV * _glow_uv_scale + vec2(TIME * _glow_time_scale + random_seed * 100.0)).r;
	float highlight_noise = pow(texture(glow_noise_texture, UV * _glow_uv_scale * .4 + vec2(TIME * _glow_time_scale * .4 + random_seed * 100.0)).r, 9.0);

	ALBEDO = mix(albedo.rgb, glow.rgb, brightness);
	ALBEDO = mix(ALBEDO.rgb, glow2.rgb, glow_noise * .35 * glow_process);
	ALBEDO = mix(ALBEDO.rgb, glow2.rgb, highlight_noise * .7 * glow_process);

	EMISSION = ALBEDO * (1.0 + glow_process * (glow_noise + highlight_noise)) * glow_power;

	// ERROR STUFF
	//ALBEDO = mix(ALBEDO, error.rgb, error_value);
	//EMISSION = mix(EMISSION, error.rgb * (2.2 + 1.2 * sin(TIME * 5.0)), error_value);

	float _warp_progress = warp_progress;
	//float _warp_progress = .5 * (1.0 +sin(TIME* 1.0));
	float zero_dist = _warp_progress * 1.5;
	float dist = abs(warp_dist-zero_dist);
	float dist2 = abs(warp_dist-zero_dist+.3);
	float warp_alpha = clamp_and_map_and_pow(dist, 0.0, 0.11, 0.008, 1.0, 4.0);
	float warp_emission = clamp_and_map_and_pow(dist2, 0.19, 0.33, 1.0, 0.0, 2.8);
	ALPHA *= warp_alpha;
	EMISSION = mix(EMISSION, albedo.rgb * 10.0, warp_emission * .8);
	//EMISSION = mix(glow.rgb, error.rgb, warp_emission / 10.0);
	//ALPHA *= float(warp_dist > _warp_progress) * warp_dist;
}
"

[sub_resource type="ViewportTexture" id="ViewportTexture_kpogh"]
viewport_path = NodePath("TextureViewport")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_phcjj"]
noise_type = 0
frequency = 0.0131
fractal_type = 0
fractal_octaves = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_yb5wr"]
seamless = true
seamless_blend_skirt = 0.182
noise = SubResource("FastNoiseLite_phcjj")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ip25q"]
resource_local_to_scene = true
render_priority = 127
shader = SubResource("Shader_xxhw5")
shader_parameter/albedo = Color(0, 0.859375, 0.0134277, 1)
shader_parameter/glow = Color(1, 1, 1, 1)
shader_parameter/glow2 = Color(0.585938, 0.932068, 1, 1)
shader_parameter/glow3 = null
shader_parameter/error = Color(1, 0.34375, 0.34375, 1)
shader_parameter/glow_uv_scale = 0.9
shader_parameter/glow_time_scale = 0.07
shader_parameter/glow_power = 1.5
shader_parameter/glow_process = 4.75e-08
shader_parameter/brightness = 0.2
shader_parameter/title_uv_aa = Vector2(0.04, 0.09)
shader_parameter/title_uv_bb = Vector2(0.395, 0.202)
shader_parameter/icon_uv_aa = Vector2(0.07, 0.145)
shader_parameter/icon_uv_bb = Vector2(0.37, 0.435)
shader_parameter/text_uv_aa = Vector2(0.085, 0.38)
shader_parameter/text_uv_bb = Vector2(0.345, 0.63)
shader_parameter/error_uv_aa = Vector2(0, 0.15)
shader_parameter/error_uv_bb = Vector2(0.5, 0.215)
shader_parameter/random_seed = null
shader_parameter/warp_global_pos = Vector3(0.005, -0.03, 0.06)
shader_parameter/warp_progress = 0.0
shader_parameter/warp_scale = 1.0
shader_parameter/glow_noise_texture = SubResource("NoiseTexture2D_yb5wr")
shader_parameter/card_texture = SubResource("ViewportTexture_kpogh")

[resource]
resource_local_to_scene = true
render_priority = 1
next_pass = SubResource("ShaderMaterial_ip25q")
transparency = 1
albedo_color = Color(0, 0, 0, 1)
normal_enabled = true
normal_scale = 0.05
uv1_scale = Vector3(3.8, 3.8, 3.8)
uv1_offset = Vector3(0.74, 0.295, 0)
